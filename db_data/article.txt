article_id	title	content	markdown	create_time	update_time	author	thumbnail
1	To do list	<ol>
<li>move my cmd here, and the url is <a href="./cmd">/Pygmalion/cmd</a></li>
</ol>
	1. move my cmd here, and the url is [/Pygmalion/cmd](./cmd)	2015/3/5 15:40:26	2015/3/5 15:40:26	1	move my cmd here, and the url is /Pygmalion/cmd
2	背单词流程	<ol>
<li>login detection，如果没有login，就要先login</li>
<li>选择词库</li>
<li>拉取单词列表，一个列表20个单词
<ul>
<li>如果有"待复习"的，从待复习单词中抽出来20个</li>
<li>反之，从未背诵的单词中随机抽出20个</li>
</ul></li>
<li>循环背单词（显示假名），并建立/更新每个单词的用户信息
<ul>
<li>pass_count</li>
<li>fail_count</li>
<li>not_sure_count</li>
</ul></li>
<li>快速循环第二次，并建立/更新每个单词的用户信息，并维护背诵单词的总数量
<ul>
<li>level</li>
<li>next_review_date</li>
</ul></li>
<li>将3,4中得到的用户信息和server同步，然后回到2</li>
</ol>
	1. login detection，如果没有login，就要先login
2. 选择词库
3. 拉取单词列表，一个列表20个单词
   - 如果有"待复习"的，从待复习单词中抽出来20个
   - 反之，从未背诵的单词中随机抽出20个
4. 循环背单词（显示假名），并建立/更新每个单词的用户信息
   - pass_count
   - fail_count
   - not_sure_count
5. 快速循环第二次，并建立/更新每个单词的用户信息，并维护背诵单词的总数量
   - level
   - next_review_date
6. 将3,4中得到的用户信息和server同步，然后回到2	2015/3/5 16:04:39	2015/3/6 13:56:15	1	
3	现有的console执行逻辑	<h3>Command Part</h3>
<ul>
<li><strong>现有逻辑</strong>：Command类中有end(message)方法，命令执行完后手动调用end，在end中会调用console的onExecuteComplete来开启新的输入</li>
<li><strong>改造方法</strong>：Command的execute返回promise</li>
</ul>
<h3>Application Part</h3>
<ul>
<li><p><strong>现有逻辑</strong>：</p>
<ul>
<li><strong>启动application</strong>：
<ol>
<li>console调用start：<code>this.activeApplication = application;application.start(optionStr);</code></li>
<li>application在start中调用main</li>
</ol></li>
<li><strong>进入输入模式/application命令行模式</strong>
<ul>
<li><strong>输入模式</strong>：在application上设定currentHandler（通过调用next方法），之后调用console.onExecuteComplete，在下一次enter按下后，console会在以下条件下执行applicationcurrentHandler：有application正在运行并且application的currentHandler不为空。currentHandler中会继续调用next或者end</li>
<li><strong>application命令行模式</strong>：将application的currentHandler置空，之后在console上注册applicationCommands</li>
</ul></li>
</ul></li>
<li><p><strong>改造方法：</strong></p>
<ul>
<li>从</li>
</ul></li>
</ul>
	### Command Part ###
- **现有逻辑**：Command类中有end(message)方法，命令执行完后手动调用end，在end中会调用console的onExecuteComplete来开启新的输入
- **改造方法**：Command的execute返回promise

### Application Part ###
- **现有逻辑**：
  - **启动application**：
     1. console调用start：`this.activeApplication = application;application.start(optionStr);`
     2. application在start中调用main
  - **进入输入模式/application命令行模式**
     - **输入模式**：在application上设定currentHandler（通过调用next方法），之后调用console.onExecuteComplete，在下一次enter按下后，console会在以下条件下执行applicationcurrentHandler：有application正在运行并且application的currentHandler不为空。currentHandler中会继续调用next或者end
     - **application命令行模式**：将application的currentHandler置空，之后在console上注册applicationCommands

- **改造方法：**
  - 从	2015/3/6 15:25:45	2015/3/6 16:37:46	1	command part
